#The upstream can be named anything. I just named it apache for convenience.
upstream apache {
  keepalive 256;
  #Assuming apache is running on the same machine use localhost with the port apache is listening on (8080 in my example). Otherwise use the IP address and port apache is running on.
  server localhost:8080;
  #This is essentially a proxy and this connection will be made over http not https, but as long as apache is on the same machine and/or same private network this is ok. If you require https because the apache server is outside of the network or running on port 443 with SSL then you can secure the connection by using the IP address for the apache machine with port 443 in the configuration line above and then add these lines (or something very close to this depending on your needs) to the proxypass line for the /apache location in the server config below:

            #proxy_ssl_certificate         /path/to/cert.cer;
            #proxy_ssl_certificate_key     /path/to/cert.key;
            #proxy_ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
            #proxy_ssl_verify        on;
            #proxy_ssl_verify_depth  2;
            #proxy_ssl_session_reuse on;

}


#You should be redirecting all non-SSL trafic to SSL using DNS or with a page rule in your load balancer (if you have one), but if you need to listen on port 80 and port 443 so that you can accept both SSL and non-SSL request then you can just duplicate the entire server object below and paste it at the bottom after the end of this one. Leave this one configured to listen on port 80 and change the configuration on the copied one to listen on 443 by commenting out the listen on 80 line and uncommenting the 4 SSL lines. This will mean you have two full server objects that look something like this:
#     server {
#     listen 80
#     server_name domain.com www.domain.com api.domain.com;
#
#     The rest of the configuration goes here, etc...
#     }

#     server {
#     listen 443;
#     ssl_certificate   /path/to/cert.cer;
#     ssl_certificate_key   /path/to/cert.key;
#     server_name domain.com www.domain.com api.domain.com;
#
#     The rest of the configuration goes here, etc...
#     }

#If you are not using a load balancer and need to listen on port 80 with nginx and then redirect to SSL then you will have two server configs as described above, but instead of them being identical and both serving the same content on SSL and non-SSL, the one that listens on 80 should instead just redirect to the SSL server as shown here:
#     server {
#     listen 80
#     server_name domain.com www.domain.com api.domain.com;
#     return 301 https://$host$request_uri;
#     }
#
#     server {
#     listen 443;
#     ssl_certificate   /path/to/cert.cer;
#     ssl_certificate_key   /path/to/cert.key;
#     server_name domain.com www.domain.com api.domain.com;
#
#     The rest of the configuration goes here, etc...
#     }
#This configuration would redirect all non-https traffic to https

server {

listen 80;
#Comment out the line above for port 80 and uncomment the next 4 lines to enable SSL instead.
#ssl on;
#listen 443;
#ssl_certificate    /path/to/cert.cer;
#ssl_certificate_key    /path/to/cert.key;

server_name domain.com www.domain.com api.domain.com;

location ~ /(.*)$ {
    #this location serves static files from the /path/to/webroot directory (and looks for index.html if the path is to a directory) for any URL requested on the domains listed above in the server_name line (domain.com www.domain.com api.domain.com)
    root /path/to/webroot;
    try_files /index.html =404;
}

location ~ /someroute/(.*) {
    #this location intercepts requests to /someroute and forwards them to apache instead of server a static file from the /path/to/webroot directory
    proxy_set_header   X-Forwarded-For $remote_addr;
    proxy_set_header   Host $http_host;
    proxy_pass         http://apache/$1;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_buffering off;

    #to proxy to https instead of http change the proxy_pass line to https://apache/$1; and uncomment and configure the 6 lines below
    #proxy_ssl_certificate         /path/to/cert.cer;
    #proxy_ssl_certificate_key     /path/to/cert.key;
    #proxy_ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
    #proxy_ssl_verify        on;
    #proxy_ssl_verify_depth  2;
    #proxy_ssl_session_reuse on;

    gzip on;
    gzip_types      text/plain application/xml application/javascript;
    gzip_proxied    no-cache no-store private expired auth;
    gzip_min_length 1000;
}


}
